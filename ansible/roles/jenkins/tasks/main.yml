- name: Define jenkins_repo_url
  set_fact:
    jenkins_repo_url: "{{ __jenkins_repo_url }}"
  when: jenkins_repo_url is not defined

- name: Define jenkins_repo_key_url
  set_fact:
    jenkins_repo_key_url: "{{ __jenkins_repo_key_url }}"
  when: jenkins_repo_key_url is not defined


- name: Define jenkins_pkg_url
  set_fact:
    jenkins_pkg_url: "{{ __jenkins_pkg_url }}"
  when: jenkins_pkg_url is not defined

- name: Ensure dependencies are installed.
  apt:
    name:
      - curl
      - apt-transport-https
      - gnupg
      - acl
      - awscli
    state: present

- name: Add Jenkins apt repository key.
  apt_key:
    url: "{{ jenkins_repo_key_url }}"
    state: present

- name: Add Jenkins apt repository.
  apt_repository:
    repo: "{{ jenkins_repo_url }}"
    state: present
    update_cache: true
  when: jenkins_repo_url | default(false)
  tags: ['skip_ansible_lint']

- name: Download specific Jenkins version.
  get_url:
    url: "{{ jenkins_pkg_url }}/jenkins_{{ jenkins_version }}_all.deb"
    dest: "/tmp/jenkins_{{ jenkins_version }}_all.deb"
  when: jenkins_version is defined

- name: Check if we downloaded a specific version of Jenkins.
  stat:
    path: "/tmp/jenkins_{{ jenkins_version }}_all.deb"
  register: specific_version
  when: jenkins_version is defined

- name: Install our specific version of Jenkins.
  apt:
    deb: "/tmp/jenkins_{{ jenkins_version }}_all.deb"
    state: present
  when: jenkins_version is defined and specific_version.stat.exists
  register: install_specific

- name: Ensure Jenkins is installed.
  apt:
    name: jenkins
    state: "{{ jenkins_package_state }}"
  register: install_jenkins


- name: Add the user 'jenkins' to docker group
  user:
    name: "{{ jenkins_process_user }}"
    groups: docker
    append: yes

- name: Create custom init scripts directory.
  file:
    path: "{{ jenkins_home }}/init.groovy.d"
    state: directory
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0775

- name: configure default users
  template:
    src: basic-security.groovy.j2
    dest: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0775
  register: jenkins_users_config
  when: install_specific.changed or install_jenkins.changed


# Configure Jenkins init settings.
- include_tasks: settings.yml

# Make sure Jenkins starts, then configure Jenkins.
- name: Ensure Jenkins is started and runs on startup.
  service: 
    name: jenkins 
    state: started 
    enabled: yes

- name: Wait for Jenkins to start up before proceeding.
  uri:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
    method: GET
    return_content: "yes"
    timeout: 5
    body_format: raw
    follow_redirects: "no"
    status_code: 200,403
  register: result
  until: (result.status == 403 or result.status == 200) and (result.content.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false
  check_mode: false

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or '304' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10
  check_mode: false

# Update Jenkins and install configured plugins.
- include_tasks: plugins.yml


- name: Remove Jenkins security init scripts after first startup.
  file:
    path: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
    state: absent

- name: Remove Jenkins initial password.
  file:
    path: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
    state: absent


- name: Add ansible repository
  apt_repository:
    repo: ppa:ansible/ansible

- name: Install dependencies
  apt:
    name:
      - ansible
    state: latest
    update_cache: yes
  become: true

- name: Add Google official GPG key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add Kubernetes Repository
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main 
    state: present
    filename: kubernetes
    mode: 0600

- name: Installing Kubernetes Cluster Packages.
  apt: 
    name:
      - kubectl
    state: present

- name: Install Helm 
  shell: curl -s  https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

- name: Restart Jenkins to be sure all changes applied
  service: name=jenkins state=restarted